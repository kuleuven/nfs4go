// This file was automatically generated by go generate; DO NOT EDIT
package msg

// This file contains specialed Decode and Encode functions
// to avoid the use of the reflect package while encoding.
// In principal, everything should work when commenting out
// this file.

import "github.com/kuleuven/nfs4go/xdr"

func (x *Fsid4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Major, &x.Minor)
}
	
func (x Fsid4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Major, x.Minor)
}

func (x *Specdata4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.D1, &x.D2)
}
	
func (x Specdata4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.D1, x.D2)
}

func (x *FAttr4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Mask, &x.Vals)
}
	
func (x FAttr4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Mask, x.Vals)
}

func (x *GETATTR4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.AttrRequest)
}
	
func (x GETATTR4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.AttrRequest)
}

func (x *GETATTR4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Attr)
}
	
func (x GETATTR4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Attr)
}

func (x *NfsClientId4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Verifier, &x.Id)
}
	
func (x NfsClientId4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Verifier, x.Id)
}

func (x *ClientAddr4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.NetId, &x.Addr)
}
	
func (x ClientAddr4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.NetId, x.Addr)
}

func (x *CbClient4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.CbProgram, &x.CbLocation)
}
	
func (x CbClient4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.CbProgram, x.CbLocation)
}

func (x *SETCLIENTID4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Client, &x.Callback, &x.CallbackIdent)
}
	
func (x SETCLIENTID4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Client, x.Callback, x.CallbackIdent)
}

func (x *SETCLIENTID4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.ClientId, &x.SetClientIdConfirm)
}
	
func (x SETCLIENTID4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.ClientId, x.SetClientIdConfirm)
}

func (x *SETCLIENTID_CONFIRM4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.ClientId, &x.Verifier)
}
	
func (x SETCLIENTID_CONFIRM4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.ClientId, x.Verifier)
}

func (x *PUTFH4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Fh)
}
	
func (x PUTFH4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Fh)
}

func (x *LOOKUP4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.ObjName)
}
	
func (x LOOKUP4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.ObjName)
}

func (x *GETFH4args) Decode(decoder *xdr.Decoder) error {
	return nil // Empty struct
}
	
func (x GETFH4args) Encode(encoder *xdr.Encoder) error {
	return nil // Empty struct
}

func (x *GETFH4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Fh)
}
	
func (x GETFH4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Fh)
}

func (x *ACCESS4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Access)
}
	
func (x ACCESS4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Access)
}

func (x *ACCESS4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Supported, &x.Access)
}
	
func (x ACCESS4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Supported, x.Access)
}

func (x *READDIR4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Cookie, &x.CookieVerf, &x.DirCount, &x.MaxCount, &x.AttrRequest)
}
	
func (x READDIR4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Cookie, x.CookieVerf, x.DirCount, x.MaxCount, x.AttrRequest)
}

func (x *Entry4) Decode(decoder *xdr.Decoder) error {
	if err := decoder.DecodeAll(&x.Cookie, &x.Name, &x.Attrs); err != nil {
		return err
	}

	if ok, err := decoder.Bool(); err != nil || !ok {
		return err
	}

	x.Next = new(Entry4)

	return decoder.Decode(x.Next)
}
	
func (x Entry4) Encode(encoder *xdr.Encoder) error {
	if err := encoder.EncodeAll(x.Cookie, x.Name, x.Attrs); err != nil {
		return err
	}

	if x.Next == nil {
		return encoder.Bool(false)
	}

	if err := encoder.Bool(true); err != nil {
		return err
	}

	return encoder.Encode(*x.Next)
}

func (x *DirList4) Decode(decoder *xdr.Decoder) error {
	if ok, err := decoder.Bool(); err != nil {
		return err
	} else if ok {
	 	x.Entries = new(Entry4)

		if err := decoder.Decode(x.Entries); err != nil {
			return err
		}
	}

	return decoder.DecodeAll(&x.Eof)
}
	
func (x DirList4) Encode(encoder *xdr.Encoder) error {
	ok := x.Entries != nil

	if err := encoder.Bool(ok); err != nil {
		return err
	}

	if ok {
		if err := encoder.Encode(*x.Entries); err != nil {
			return err
		}
	}

	return encoder.EncodeAll(x.Eof)
}

func (x *READDIR4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.CookieVerf, &x.Reply)
}
	
func (x READDIR4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.CookieVerf, x.Reply)
}

func (x *SECINFO4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Name)
}
	
func (x SECINFO4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Name)
}

func (x *RPCSecGssInfo) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Oid, &x.Qop, &x.Service)
}
	
func (x RPCSecGssInfo) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Oid, x.Qop, x.Service)
}

func (x *Secinfo4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Flavor)
}
	
func (x Secinfo4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Flavor)
}

func (x *SECINFO4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Items)
}
	
func (x SECINFO4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Items)
}

func (x *RENEW4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.ClientId)
}
	
func (x RENEW4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.ClientId)
}

func (x *ClientOwner4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Verifier, &x.OwnerId)
}
	
func (x ClientOwner4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Verifier, x.OwnerId)
}

func (x *StateProtectOps4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.MustEnforce, &x.MustAllow)
}
	
func (x StateProtectOps4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.MustEnforce, x.MustAllow)
}

func (x *ServerOwner4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.MinorId, &x.MajorId)
}
	
func (x ServerOwner4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.MinorId, x.MajorId)
}

func (x *NfsTime4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Seconds, &x.NSeconds)
}
	
func (x NfsTime4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Seconds, x.NSeconds)
}

func (x *NfsImplId4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Domain, &x.Name, &x.Date)
}
	
func (x NfsImplId4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Domain, x.Name, x.Date)
}

func (x *ChangeInfo4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Atomic, &x.Before, &x.After)
}
	
func (x ChangeInfo4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Atomic, x.Before, x.After)
}

func (x *CREATE4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Type, &x.ObjName, &x.CreateAttrs)
}
	
func (x CREATE4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Type, x.ObjName, x.CreateAttrs)
}

func (x *CREATE4type) Decode(decoder *xdr.Decoder) error {
	return decoder.Union(&x.ObjType, &x.Void, &x.VoidReg, &x.VoidDir, &x.BlkData, &x.ChrData, &x.LinkData, &x.VoidSock, &x.VoidFifo)
}
	
func (x CREATE4type) Encode(encoder *xdr.Encoder) error {
	return encoder.Union(x.ObjType, x.Void, x.VoidReg, x.VoidDir, x.BlkData, x.ChrData, x.LinkData, x.VoidSock, x.VoidFifo)
}

func (x *CREATE4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.CInfo, &x.AttrSet)
}
	
func (x CREATE4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.CInfo, x.AttrSet)
}

func (x *OpenOwner4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.ClientId, &x.Owner)
}
	
func (x OpenOwner4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.ClientId, x.Owner)
}

func (x *OpenHow4) Decode(decoder *xdr.Decoder) error {
	return decoder.Union(&x.How, &x.Void, &x.Claim)
}
	
func (x OpenHow4) Encode(encoder *xdr.Encoder) error {
	return encoder.Union(x.How, x.Void, x.Claim)
}

func (x *CreateHow4) Decode(decoder *xdr.Decoder) error {
	return decoder.Union(&x.CreateMode, &x.CreateAttrsUnchecked, &x.CreateAttrsGuarded, &x.CreateVerf, &x.CreateVerf41)
}
	
func (x CreateHow4) Encode(encoder *xdr.Encoder) error {
	return encoder.Union(x.CreateMode, x.CreateAttrsUnchecked, x.CreateAttrsGuarded, x.CreateVerf, x.CreateVerf41)
}

func (x *CreateVerfAttr) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Verf, &x.Attrs)
}
	
func (x CreateVerfAttr) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Verf, x.Attrs)
}

func (x *StateId4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.SeqId, &x.Other)
}
	
func (x StateId4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.SeqId, x.Other)
}

func (x *OpenClaimDelegateCur4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.DelegateStateId, &x.File)
}
	
func (x OpenClaimDelegateCur4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.DelegateStateId, x.File)
}

func (x *OpenClaim4) Decode(decoder *xdr.Decoder) error {
	return decoder.Union(&x.Claim, &x.File, &x.DelegateType, &x.DelegateCurInfo, &x.FileDelegatePrev, &x.VoidClaimFH, &x.DelegCurFHStateID, &x.VoidDelegPrevFH)
}
	
func (x OpenClaim4) Encode(encoder *xdr.Encoder) error {
	return encoder.Union(x.Claim, x.File, x.DelegateType, x.DelegateCurInfo, x.FileDelegatePrev, x.VoidClaimFH, x.DelegCurFHStateID, x.VoidDelegPrevFH)
}

func (x *OPEN4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.SeqID, &x.ShareAccess, &x.ShareDeny, &x.Owner, &x.OpenHow, &x.OpenClaim)
}
	
func (x OPEN4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.SeqID, x.ShareAccess, x.ShareDeny, x.Owner, x.OpenHow, x.OpenClaim)
}

func (x *OPENDG4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.OpenStateId, &x.SeqId, &x.ShareAccess, &x.ShareDeny)
}
	
func (x OPENDG4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.OpenStateId, x.SeqId, x.ShareAccess, x.ShareDeny)
}

func (x *NfsAce4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Type, &x.Flag, &x.AccessMask, &x.Who)
}
	
func (x NfsAce4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Type, x.Flag, x.AccessMask, x.Who)
}

func (x *NfsPosixAce4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Tag, &x.Perm, &x.Who)
}
	
func (x NfsPosixAce4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Tag, x.Perm, x.Who)
}

func (x *NfsModifiedLimit4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.NumBlocks, &x.BytesPerBlock)
}
	
func (x NfsModifiedLimit4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.NumBlocks, x.BytesPerBlock)
}

func (x *NfsSpaceLimit4) Decode(decoder *xdr.Decoder) error {
	if err := decoder.DecodeAll(&x.LimitBy, &x.FileSize); err != nil {
		return err
	}

	if ok, err := decoder.Bool(); err != nil || !ok {
		return err
	}

	x.ModBlocks = new(NfsModifiedLimit4)

	return decoder.Decode(x.ModBlocks)
}
	
func (x NfsSpaceLimit4) Encode(encoder *xdr.Encoder) error {
	if err := encoder.EncodeAll(x.LimitBy, x.FileSize); err != nil {
		return err
	}

	if x.ModBlocks == nil {
		return encoder.Bool(false)
	}

	if err := encoder.Bool(true); err != nil {
		return err
	}

	return encoder.Encode(*x.ModBlocks)
}

func (x *OpenReadDelegation4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.StateId, &x.Recall, &x.Permissions)
}
	
func (x OpenReadDelegation4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.StateId, x.Recall, x.Permissions)
}

func (x *OpenWriteDelegation4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.StateId, &x.Recall, &x.SpaceLimit, &x.Permissions)
}
	
func (x OpenWriteDelegation4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.StateId, x.Recall, x.SpaceLimit, x.Permissions)
}

func (x *OpenDelegation4) Decode(decoder *xdr.Decoder) error {
	return decoder.Union(&x.Type, &x.DelegateNone, &x.DelegateRead, &x.DelegateWrite, &x.DelegateNoneWhy)
}
	
func (x OpenDelegation4) Encode(encoder *xdr.Encoder) error {
	return encoder.Union(x.Type, x.DelegateNone, x.DelegateRead, x.DelegateWrite, x.DelegateNoneWhy)
}

func (x *OpenDelegationNoneWhy4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Why)
}
	
func (x OpenDelegationNoneWhy4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Why)
}

func (x *OPEN4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.StateId, &x.CInfo, &x.Rflags, &x.AttrSet, &x.Delegation)
}
	
func (x OPEN4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.StateId, x.CInfo, x.Rflags, x.AttrSet, x.Delegation)
}

func (x *OpenDelegationNone4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Mode)
}
	
func (x OpenDelegationNone4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Mode)
}

func (x *CLOSE4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.SeqId, &x.OpenStateId)
}
	
func (x CLOSE4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.SeqId, x.OpenStateId)
}

func (x *SETATTR4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.StateId, &x.Attrs)
}
	
func (x SETATTR4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.StateId, x.Attrs)
}

func (x *REMOVE4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Target)
}
	
func (x REMOVE4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Target)
}

func (x *REMOVE4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.CInfo)
}
	
func (x REMOVE4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.CInfo)
}

func (x *COMMIT4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Offset, &x.Count)
}
	
func (x COMMIT4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Offset, x.Count)
}

func (x *COMMIT4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Verifier)
}
	
func (x COMMIT4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Verifier)
}

func (x *WRITE4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.StateId, &x.Offset, &x.Stable, &x.Data)
}
	
func (x WRITE4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.StateId, x.Offset, x.Stable, x.Data)
}

func (x *WRITE4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Count, &x.Committed, &x.WriteVerf)
}
	
func (x WRITE4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Count, x.Committed, x.WriteVerf)
}

func (x *READ4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.StateId, &x.Offset, &x.Count)
}
	
func (x READ4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.StateId, x.Offset, x.Count)
}

func (x *READ4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Eof, &x.Data)
}
	
func (x READ4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Eof, x.Data)
}

func (x *RENAME4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.OldName, &x.NewName)
}
	
func (x RENAME4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.OldName, x.NewName)
}

func (x *RENAME4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.SourceCInfo, &x.TargetCInfo)
}
	
func (x RENAME4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.SourceCInfo, x.TargetCInfo)
}

func (x *LINK4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.NewName)
}
	
func (x LINK4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.NewName)
}

func (x *LINK4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.CInfo)
}
	
func (x LINK4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.CInfo)
}

func (x *READLINK4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Link)
}
	
func (x READLINK4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Link)
}

func (x *GETXATTR4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Name)
}
	
func (x GETXATTR4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Name)
}

func (x *GETXATTR4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Value)
}
	
func (x GETXATTR4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Value)
}

func (x *SETXATTR4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Option, &x.Name, &x.Value)
}
	
func (x SETXATTR4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Option, x.Name, x.Value)
}

func (x *SETXATTR4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.CInfo)
}
	
func (x SETXATTR4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.CInfo)
}

func (x *LISTXATTRS4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Cookie, &x.MaxCount)
}
	
func (x LISTXATTRS4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Cookie, x.MaxCount)
}

func (x *LISTXATTRS4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Cookie, &x.Names, &x.EOF)
}
	
func (x LISTXATTRS4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Cookie, x.Names, x.EOF)
}

func (x *REMOVEXATTR4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Name)
}
	
func (x REMOVEXATTR4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Name)
}

func (x *REMOVEXATTR4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.CInfo)
}
	
func (x REMOVEXATTR4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.CInfo)
}

func (x *EXCHANGE_ID4args) Decode(decoder *xdr.Decoder) error {
	if err := decoder.DecodeAll(&x.ClientOwner, &x.Flags, &x.StateProtect); err != nil {
		return err
	}

	if ok, err := decoder.Bool(); err != nil || !ok {
		return err
	}

	x.ClientImplId = new(NfsImplId4)

	return decoder.Decode(x.ClientImplId)
}
	
func (x EXCHANGE_ID4args) Encode(encoder *xdr.Encoder) error {
	if err := encoder.EncodeAll(x.ClientOwner, x.Flags, x.StateProtect); err != nil {
		return err
	}

	if x.ClientImplId == nil {
		return encoder.Bool(false)
	}

	if err := encoder.Bool(true); err != nil {
		return err
	}

	return encoder.Encode(*x.ClientImplId)
}

func (x *EXCHANGE_ID4resok) Decode(decoder *xdr.Decoder) error {
	if err := decoder.DecodeAll(&x.ClientID, &x.SequenceID, &x.Flags, &x.StateProtect, &x.ServerOwner, &x.ServerScope); err != nil {
		return err
	}

	if ok, err := decoder.Bool(); err != nil || !ok {
		return err
	}

	x.ServerImplId = new(NfsImplId4)

	return decoder.Decode(x.ServerImplId)
}
	
func (x EXCHANGE_ID4resok) Encode(encoder *xdr.Encoder) error {
	if err := encoder.EncodeAll(x.ClientID, x.SequenceID, x.Flags, x.StateProtect, x.ServerOwner, x.ServerScope); err != nil {
		return err
	}

	if x.ServerImplId == nil {
		return encoder.Bool(false)
	}

	if err := encoder.Bool(true); err != nil {
		return err
	}

	return encoder.Encode(*x.ServerImplId)
}

func (x *Void) Decode(decoder *xdr.Decoder) error {
	return nil // Empty struct
}
	
func (x Void) Encode(encoder *xdr.Encoder) error {
	return nil // Empty struct
}

func (x *StateProtect4) Decode(decoder *xdr.Decoder) error {
	return decoder.Union(&x.How, &x.Void, &x.MachOps, &x.SsvInfo)
}
	
func (x StateProtect4) Encode(encoder *xdr.Encoder) error {
	return encoder.Union(x.How, x.Void, x.MachOps, x.SsvInfo)
}

func (x *SsvSpParams4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Ops, &x.HashAlgs, &x.EncrAlgs, &x.Window, &x.NumGssHandles)
}
	
func (x SsvSpParams4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Ops, x.HashAlgs, x.EncrAlgs, x.Window, x.NumGssHandles)
}

func (x *SsvProtInfo4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.Ops, &x.HashAlg, &x.EncrAlg, &x.SsvLen, &x.Window, &x.Handles)
}
	
func (x SsvProtInfo4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.Ops, x.HashAlg, x.EncrAlg, x.SsvLen, x.Window, x.Handles)
}

func (x *CREATE_SESSION4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.ClientID, &x.SequenceID, &x.Flags, &x.ForeChanAttrs, &x.BackChanAttrs, &x.CbProgram, &x.SecParms)
}
	
func (x CREATE_SESSION4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.ClientID, x.SequenceID, x.Flags, x.ForeChanAttrs, x.BackChanAttrs, x.CbProgram, x.SecParms)
}

func (x *Creds) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.ExpirationValue, &x.Hostname, &x.UID, &x.GID, &x.AdditionalGroups)
}
	
func (x Creds) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.ExpirationValue, x.Hostname, x.UID, x.GID, x.AdditionalGroups)
}

func (x *ChannelAttrs4) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.HeaderPadSize, &x.MaxRequestSize, &x.MaxResponseSize, &x.MaxResponseSizeCached, &x.MaxOperations, &x.MaxRequests, &x.RdmaIrd)
}
	
func (x ChannelAttrs4) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.HeaderPadSize, x.MaxRequestSize, x.MaxResponseSize, x.MaxResponseSizeCached, x.MaxOperations, x.MaxRequests, x.RdmaIrd)
}

func (x *CREATE_SESSION4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.SessionID, &x.SequenceID, &x.Flags, &x.ForeChanAttrs, &x.BackChanAttrs)
}
	
func (x CREATE_SESSION4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.SessionID, x.SequenceID, x.Flags, x.ForeChanAttrs, x.BackChanAttrs)
}

func (x *SEQUENCE4args) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.SessionID, &x.SequenceID, &x.SlotID, &x.SlotIDHighest, &x.CacheThis)
}
	
func (x SEQUENCE4args) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.SessionID, x.SequenceID, x.SlotID, x.SlotIDHighest, x.CacheThis)
}

func (x *SEQUENCE4resok) Decode(decoder *xdr.Decoder) error {
	return decoder.DecodeAll(&x.SessionID, &x.SequenceID, &x.SlotID, &x.SlotIDHighest, &x.SlotIDHighestTarget, &x.Flags)
}
	
func (x SEQUENCE4resok) Encode(encoder *xdr.Encoder) error {
	return encoder.EncodeAll(x.SessionID, x.SequenceID, x.SlotID, x.SlotIDHighest, x.SlotIDHighestTarget, x.Flags)
}